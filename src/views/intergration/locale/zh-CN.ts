export default {
  'intergration.input.holder': '请输入名称',
  'intergration.sourceRepo': '源码仓库',
  'intergration.proxy': '构件代理',
  'intergration.pushService': '推送服务',
  'intergration.projectmanage': '项目管理',
  'intergration.containerRepo': '镜像仓库',
  'intergration.containerRepo.images': 'OCI',
  'intergration.containerOrchestration': '容器编排',
  'intergration.all': '全部',
  'intergration.setting': '配置',
  'intergration.setting.title': '集成设置',
  'intergration.configured': '已配置',
  'intergration.unconfigured': '未配置',
  'intergration.notopen': '待开放',
  'intergration.button.create': '添加代理',
  'intergration.button.add': '添加{service}',
  'intergration.accessToken': '{repo}访问令牌',
  'intergration.repo.app': '{repo}应用',
  'intergration.repo.clientId': 'Client ID',
  'intergration.repo.clientSecret': 'Client Secret',
  'intergration.accessRepo': 'Repository访问',
  'intergration.access.allRepo': '同时访问公有及私有仓库',
  'intergration.access.pubRepo': '仅访问公有仓库',
  'intergration.tokenTips': '输入的访问令牌需要对导入的代码仓库拥有管理权限',
  'intergration.createToken.title': '在{repo}创建访问令牌：',
  'intergration.createToken.step1':
    '1.点击下方按钮登录{repo}，在Note一栏输入Token备注，如Seal',
  'intergration.createApp.title': '设置{repo}应用：',
  'intergration.createApp.reconfig': '重新配置',
  'intergration.createApp.step1': '点击下方按钮，在弹出的新窗口进行应用设置',
  'intergration.createApp.step2': `点击【New OAuth App】，并填写表单内容`,
  'intergration.createApp.step2.2': `- 应用名称: 例如: My Seal`,
  'intergration.createApp.step2.3': `- 应用首页 URL: {baseurl}`,
  'intergration.createApp.step2.4': `- 应用描述: 应用描述，可选`,
  'intergration.createApp.step2.5': `- 授权回调 URL: {baseurl}`,
  'intergration.createApp.step3': '点击【Generate a new client secret】',
  'intergration.createApp.step4':
    '将client secret,client ID复制粘贴到左侧输入框中',
  'intergration.createApp.jira.step2': `点击【Create】按钮，选择OAuth 2.0 integration，填写应用名称`,
  'intergration.createApp.jira.step2.2': `- 名称: 例如: My Seal，提交`,
  'intergration.createApp.jira.step3': `点击「Permissions」菜单，配置适用API`,
  'intergration.createApp.jira.step3.1': `- 点击【Add】添加Jira API`,
  'intergration.createApp.jira.step3.2': `- 点击【Configure】配置Jira API授权范围`,
  'intergration.createApp.jira.step3.3': `- 选择【Classic scopes】栏，点击【Edit Scopes】选择read:jira-work、read:jira-user、write:jira-work`,
  'intergration.createApp.jira.step4': `点击「Authorization」菜单，`,
  'intergration.createApp.jira.step4.1': `- 点击【Add】，填写授权回调URL: {baseurl}`,
  'intergration.createApp.jira.step5': '点击「Settings」菜单',
  'intergration.createApp.button': '创建{repo}应用',
  'intergration.createApp.gitlab.step1':
    '若是公有GitLab服务，点击下方按钮，在弹出的新窗口进行应用设置',
  'intergration.createApp.gitlab.step1.1':
    '若是私有GitLab服务，勾选左侧使用私有GitLab',
  'intergration.createApp.gitlab.step1.2': '- 输入GitLab地址',
  'intergration.createApp.gitlab.step1.3':
    '- 点击下方按钮，在弹出的新窗口进行应用设置',
  'intergration.createApp.gitlab.step2': '填写表单内容',
  'intergration.createApp.gitlab.step2.3': '- 重定向地址:',
  'intergration.createApp.gitlab.step2.4': '- Scopes勾选api',
  'intergration.createApp.gitlab.step3': '点击【Save application】按钮',
  'intergration.createApp.gitlab.step4': '复制application ID到左侧Client ID',
  'intergration.createApp.gitlab.step5': '复制Secret到左侧Client Secret',
  'intergration.createApp.gitlab.private': '使用私有的{repo}',
  'intergration.createApp.gitlaburl': 'GitLab地址',
  'intergration.createApp.jiraurl': 'Jira命名空间',
  'intergration.jiraurl.url': 'Jira地址',
  'intergration.createToken.step2': '2.配置过期时间，将Scope配置为repo',
  'intergration.createToken.step3': '3.点击Generate Token',
  'intergration.createToken.step4': '4.将Token复制粘贴到左侧Access Token一栏中',
  'intergration.createToken.button': '创建访问令牌',
  'intergration.scan.title': 'Seal漏洞扫描',
  'intergration.scan.opts1': '扫描新的Pull Request',
  'intergration.scan.opts2': '自动创建Pull Request以修复漏洞',
  'intergration.scan.opts3': '定期对源代码进行漏洞扫描',
  'intergration.scan.opts4': '接收到webhook事件时进行漏洞扫描',
  'intergration.button.connect': '连接{repo}',
  'intergration.token.message': 'access token为必填',
  'intergration.button.save': '保存',
  'intergration.policy.title': '{repo}代理Repository',
  'intergration.policy.label': '代理设置',
  'intergration.form.repoName': '代理Repository名称:',
  'intergration.form.repoNameDesc':
    '说明：代理Repository的唯一名称，仅支持字母、数字、连字符(-)，且以字母开头，以字母或数字结尾。',
  'intergration.form.repoUrl': '上游Repository地址:',
  'intergration.policy.bind': '策略绑定',
  'intergration.policy.list': '可选策略',
  'intergration.policy.selected': '应用策略',
  'intergration.rules.repoName':
    '仅支持字母、数字、连字符(-)，且以字母开头，以字母或数字结尾',
  'intergration.rules.first': '开头不能为下划线、连字符或点号',
  'intergration.rules.required': '代理Repository名称为必填',
  'intergration.repoPolicy.name': '名称',
  'intergration.repoPolicy.proxyUrl': '代理地址',
  'intergration.repoPolicy.upstreamUrl': '上游地址',
  'intergration.rules.upstreamUrl': '上游Repository地址必填',
  'intergration.rules.clientSecret': 'Client Secret必填',
  'intergration.rules.clientId': 'Client ID必填',
  'intergration.rules.gitlaburl': 'GitLab URL 必填',
  'intergration.rules.jiraurl': 'Jira命名空间必选',
  'intergration.email.title': '邮件SMTP服务器设置',
  'intergration.email.list.title': '邮件SMTP服务',
  'intergration.email.id': '名称',
  'intergration.email.ip': '主机',
  'intergration.email.port': '端口',
  'intergration.email.sender': '发件人',
  'intergration.email.tls': '使用TLS',
  'intergration.email.userName': '用户名',
  'intergration.email.password': '密码',
  'intergration.email.description': '描述',
  'intergration.email.testAccount': '测试账户设置',
  'intergration.email.usetls': '使用 TLS',
  'intergration.email.defaultReceipient': '接收人',
  'intergration.email.idDesc': '这是 SMTP 服务器定义的唯一标识名',
  'intergration.email.senderDesc': '这是发件人的电子邮件地址',
  'intergration.email.userNameDesc':
    '如果 SMTP 服务器需要身份验证，您需要指定用户名',
  'intergration.rules.email': '邮箱格式不正确',
  'intergration.rules.webhook.name': '名称为必填',
  'intergration.rules.host': '主机地址必填',
  'intergration.rules.host.url': '主机地址格式不正确',
  'intergration.rules.host.id': '名称必填',
  'intergration.rules.port': '端口必填',
  'intergration.rules.sender': '发件人必填',
  'intergration.rules.webhook': 'webhook url 必填',
  'intergration.rules.password': '用户密码不能为空',
  'intergration.rules.receiver': '接收人必填',
  'intergration.webhook.title.create': '提交新的自定义webhook',
  'intergration.webhook.title.edit': '编辑自定义webhook',
  'intergration.webhook.list.title': '自定义webhooks',
  'intergration.webhook.tips':
    'GitGuardian 允许您在任何接受传入 json 编码的 http post 请求的服务器上接收通知。为此，您必须简单地提供要从中接收警报的 url 端点。我们使用签名机制来让您验证消息来自我们。默认情况下，我们会生成一个您可以编辑的签名令牌。此签名令牌对于您这边的签名验证是强制性的。',
  'intergration.webhook.tokenTips':
    '确保复制您的签名令牌，因为您将无法再次访问',
  'intergration.webhook.name': '名称',
  'intergration.webhook.testing': '测试webhook设置',
  'intergration.webhook.nameHolder': '我的自定义webhook',
  'intergration.webhook.contentType': '内容类型',
  'intergration.webhook.contentTypeHolder': 'application/json',
  'intergration.webhook.url': 'Webhook URL',
  'intergration.webhook.urlHolder': 'https://webhook.url/endpoint',
  'intergration.webhook.token': '签名令牌',
  'intergration.webhook.noticeFre': '事件通知的频率',
  'intergration.webhook.notice.only':
    'Only at the first occurrence and in case of regression',
  'intergration.webhook.notice.all': 'At all occurrences',
  'intergration.proxy.instruction': '说明',
  'intergration.webhook.recommended': 'Recommended',
  'intergration.proxy.title.instruction': '代理仓库说明',
  'intergration.pushservice.email': '邮件',
  'intergration.pushservice.webhook': 'Webhook',
  'intergration.pushservice.dingding': '钉钉',
  'intergration.pushservice.feishu': '飞书',
  'intergration.pushservice.wechat': '微信',
  'intergration.pushservice.zentao': '禅道',
  'intergration.pushservice.add.email': 'SMTP服务',
  'intergration.pushservice.add.Webhook': 'Webhook',
  'intergration.jira.form.url': '请输入您的Jira地址',
  'intergration.jira.form.title': '选择Jira命名空间',
  'intergration.jira.form.authrize': '授权方式',
  'intergration.jira.rules.url': 'Jira地址必填',
  'intergration.jira.rules.token': 'Access Token 必填',
  'intergration.jira.private.title': '私有服务',
  'intergration.jira.cloud.title': '公有服务',
  'intergration.jira.private.token.title': 'Access Token授权方式',
  'intergration.jira.private.token.step1': '创建Token',
  'intergration.jira.private.token.step1.0':
    '- 勾选左侧「使用私有的Jira」，输入Jira地址',
  'intergration.jira.private.token.step1.1': '- 点击下方按钮',
  'intergration.jira.private.token.step1.2':
    '- 选择个人中心的「用户信息」菜单，然后选择个人访问令牌',
  'intergration.jira.private.token.step1.3':
    '- 点击【创建令牌】，填写您的令牌名称，设置【过期日期】，点击【创建】',
  'intergration.jira.private.token.step1.4':
    '- 复制您的访问令牌，黏贴到左侧Access Token输入框',
  'intergration.jira.private.oauth2.title': 'OAuth2.0授权方式',
  'intergration.jira.private.oauth2.step1.1': '- 选择管理的「应用程序」菜单',
  'intergration.jira.private.oauth2.step2': '点击【创建链接】',
  'intergration.jira.private.oauth2.step2.1': '- 应用类型选择【外部应用】',
  'intergration.jira.private.oauth2.step2.2': '- 方向选择【传入】',
  'intergration.jira.private.oauth2.step3': '填写配置信息',
  'intergration.jira.private.oauth2.step3.1': '- 填写应用名称，例如: my seal',
  'intergration.jira.private.oauth2.step3.2': '- 填写重定向URL：',
  'intergration.jira.private.oauth2.step4': '权限选择：选择Write',
  'intergration.jira.private.oauth2.step5':
    '将client secret, client ID复制粘贴到左侧输入框',
  'intergration.jira.private.oauth2.version': '仅支持Jira版本8.22.0+',
  'intergration.jira.private.token.version': '仅支持Jira版本8.14+',
  'intergration.containerrepo.standar': '标准',
  'intergration.containerrepo.title': '{repo}镜像仓库',
  'intergration.containerrepo.form.address': '地址',
  'intergration.containerrepo.form.kuberconfig': 'Kubeconfig文件',
  'intergration.containerrepo.form.clustername': '集群名称',
  'intergration.containerrepo.form.excludes': '排除的命名空间',
  'intergration.containerrepo.form.cluster': '集群',
  'intergration.containerrepo.kubeconfig.desc':
    '可上传配置文件或者直接输入在下方文本框',
  'intergration.containerrepo.namespace.desc':
    '输入命名空间按回车键确认，可配置多个',
  'intergration.containerrepo.file.desc': '文件格式: yaml或文本文件',
  'intergration.rules.kuber.name': '集群名称必填',
  'intergration.rules.kuber.config': '配置为必填',
  'intergration.rules.container.url': '地址为必填',
  'intergration.container.url.holder': '(例如)https://index.docker.io',
  'intergration.rules.container.username': '用户名为必填',
  'intergration.rules.container.password': '密码为必填',
  'intergration.containerrepo.options.system': '系统',
  'intergration.containerrepo.options.custom': '自定义',
  'intergration.containerrepo.options.none': '无',
  'intergration.containerrepo.options.holder': '输入命名空间按回车键确认',
  'intergration.containerrepo.config.test': '测试设置',
  'intergration.containerrepo.list.adds': '{repo}仓库',
  'intergration.containerrepo.upload': '从文件读取',
  'intergration.containerrepo.connect': '连接方式',
  'intergration.containerrepo.connect.verify': '验证远程证书',
  'intergration.containerrepo.verify.tips':
    '确定是否验证远程仓库的安全连接。如果远程仓库使用的是HTTP协议、自签或者非信任证书，则勾选此项',
  'intergration.containerrepo.connect.desc': '默认为安全连接',
  'intergration.containerrepo.connect.insecure': '非安全连接',
};
