import {
  Cvss2VectorParser,
  Cvss3VectorParser,
  Cvss2ScoringEngine,
  Cvss3ScoringEngine,
} from 'vuln-vects';
import { split, get, camelCase, map, cloneDeep } from 'lodash';
import { cvss2Config, cvss2Enums, cvss3Config, cvss3Enums } from '../config';

export default function useParseCvss() {
  const parse2Cvss = (vector) => {
    if (!vector) return [];
    const parser = new Cvss2VectorParser();
    const result: Cvss2ScoringEngine = parser.generateScoringEngine(vector);
    const resultList = map(cvss2Config, (o) => {
      const item = cloneDeep(o);
      const val = get(cvss2Enums, `${item.enumsKey}.${result[item.key]}`);
      item.color = get(cvss2Enums, `${item.enumsKey}.c${result[item.key]}`);
      item.value = val
        ? `vulnerability.detail.cvss.${camelCase(val)}`
        : val || '';
      console.log('result====', result, val);
      return item;
    });
    console.log('result====', resultList);
    return resultList;
  };
  const parse3Cvss = (vector) => {
    if (!vector) return [];
    const parser = new Cvss3VectorParser();
    const result: Cvss3ScoringEngine = parser.generateScoringEngine(vector);
    const resultList = map(cvss3Config, (o) => {
      const item = cloneDeep(o);
      const val = get(cvss3Enums, `${item.enumsKey}.${result[item.key]}`);
      item.color = get(cvss3Enums, `${item.enumsKey}.c${result[item.key]}`);
      item.value = val
        ? `vulnerability.detail.cvss.${camelCase(val)}`
        : val || '';
      return item;
    });
    return resultList;
  };
  const parseCvssScore = ({ version, vector }) => {
    const list = split(version, '.');
    if (get(list, '0') === '3') {
      return parse3Cvss(vector);
    }
    return parse2Cvss(vector);
  };
  return {
    parseCvssScore,
  };
}
